{
	"info": {
		"_postman_id": "53ec46a4-a6f6-4d0d-9ca6-03c94bdd78e6",
		"name": "Create user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25228255"
	},
	"item": [
		{
			"name": "Successful",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let username = pm.variables.replaceIn(\"{{$randomUserName}}\")",
							"pm.environment.set(\"username\", username)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"User object should have a 'username' property\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.user).to.be.an('object');",
							"  pm.expect(responseData.user.username).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.user).to.be.an('object');",
							"  pm.expect(responseData.user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"pm.test(\"Username in response is equal to username in request\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.user.username).to.be.eq(pm.environment.get('username'));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"pm.test(\"Error message is equal\", function() {",
							"    const responseData = pm.response.json();",
							"    const expectedError = 'Error at \\\"username\\\": property \\\"username\\\" is missing'",
							"",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"",
							"pm.test(\"Status code is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status_code).to.be.a('number');",
							"  pm.expect(responseData.status_code).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"",
							"pm.test('Error message is equal', function () {",
							"    const responseData = pm.response.json();",
							"    const expectedError = 'Error at \"password\": property \"password\" is missing';",
							"   ",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"",
							"pm.test(\"Status code is a non-zero integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.status_code).to.exist;",
							"  pm.expect(responseData.status_code).to.be.a('number');",
							"  pm.expect(responseData.status_code).to.not.equal(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomUserName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Error message is present in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.error).to.exist.and.to.be.a('string');",
							"});",
							"",
							"pm.test('Error message is equal', function () {",
							"    const responseData = pm.response.json();",
							"    const expectedError = 'EOF';",
							"   ",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"pm.test(\"Status code is a non-zero value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status_code).to.exist.and.to.be.above(0);",
							"});",
							"",
							"",
							"pm.test(\"Response contains the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error message is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"pm.test('Error message is equal', function () {",
							"    const responseData = pm.response.json();",
							"    const expectedError = \"request body has an error: failed to decode request body: invalid character ',' looking for beginning of object key string\";",
							"   ",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"",
							"pm.test(\"Status code is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.status_code).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.status_code).to.be.above(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{,}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Overlimit username length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.to.have.status(400));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"pm.test('Error message is equal', function () {",
							"    const responseData = pm.response.json();",
							"    const expectedError = 'Error at \\\"username\\\": maximum string length is 128';",
							"   ",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"",
							"pm.test(\"Status code is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status_code).to.be.a('number');",
							"    pm.expect(responseData.status_code).to.not.equal(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomImageDataUri}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Overlimit password length",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.to.have.status(400));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - error and status_code\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.error).to.exist;",
							"    pm.expect(responseData.status_code).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Error message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");",
							"});",
							"",
							"pm.test('Error message is equal', function () {",
							"    const responseData = pm.response.json();",
							"    const expectedError = 'Error at \\\"password\\\": maximum string length is 128';",
							"   ",
							"    pm.expect(responseData.error).to.be.eq(expectedError);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Status code is a non-zero integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.status_code).to.be.a('number');",
							"    pm.expect(responseData.status_code).to.not.equal(0);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"password\": \"{{$randomImageDataUri}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		}
	]
}