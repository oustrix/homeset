// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/oustrix/homeset/internal/models"
	"github.com/oustrix/homeset/internal/store/dto"
)

// CreateUserRepositoryMock implements mm_users.CreateUserRepository
type CreateUserRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateUser          func(ctx context.Context, input dto.CreateUserInput) (u1 models.User, err error)
	funcCreateUserOrigin    string
	inspectFuncCreateUser   func(ctx context.Context, input dto.CreateUserInput)
	afterCreateUserCounter  uint64
	beforeCreateUserCounter uint64
	CreateUserMock          mCreateUserRepositoryMockCreateUser
}

// NewCreateUserRepositoryMock returns a mock for mm_users.CreateUserRepository
func NewCreateUserRepositoryMock(t minimock.Tester) *CreateUserRepositoryMock {
	m := &CreateUserRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateUserMock = mCreateUserRepositoryMockCreateUser{mock: m}
	m.CreateUserMock.callArgs = []*CreateUserRepositoryMockCreateUserParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCreateUserRepositoryMockCreateUser struct {
	optional           bool
	mock               *CreateUserRepositoryMock
	defaultExpectation *CreateUserRepositoryMockCreateUserExpectation
	expectations       []*CreateUserRepositoryMockCreateUserExpectation

	callArgs []*CreateUserRepositoryMockCreateUserParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// CreateUserRepositoryMockCreateUserExpectation specifies expectation struct of the CreateUserRepository.CreateUser
type CreateUserRepositoryMockCreateUserExpectation struct {
	mock               *CreateUserRepositoryMock
	params             *CreateUserRepositoryMockCreateUserParams
	paramPtrs          *CreateUserRepositoryMockCreateUserParamPtrs
	expectationOrigins CreateUserRepositoryMockCreateUserExpectationOrigins
	results            *CreateUserRepositoryMockCreateUserResults
	returnOrigin       string
	Counter            uint64
}

// CreateUserRepositoryMockCreateUserParams contains parameters of the CreateUserRepository.CreateUser
type CreateUserRepositoryMockCreateUserParams struct {
	ctx   context.Context
	input dto.CreateUserInput
}

// CreateUserRepositoryMockCreateUserParamPtrs contains pointers to parameters of the CreateUserRepository.CreateUser
type CreateUserRepositoryMockCreateUserParamPtrs struct {
	ctx   *context.Context
	input *dto.CreateUserInput
}

// CreateUserRepositoryMockCreateUserResults contains results of the CreateUserRepository.CreateUser
type CreateUserRepositoryMockCreateUserResults struct {
	u1  models.User
	err error
}

// CreateUserRepositoryMockCreateUserOrigins contains origins of expectations of the CreateUserRepository.CreateUser
type CreateUserRepositoryMockCreateUserExpectationOrigins struct {
	origin      string
	originCtx   string
	originInput string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Optional() *mCreateUserRepositoryMockCreateUser {
	mmCreateUser.optional = true
	return mmCreateUser
}

// Expect sets up expected params for CreateUserRepository.CreateUser
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Expect(ctx context.Context, input dto.CreateUserInput) *mCreateUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &CreateUserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.paramPtrs != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by ExpectParams functions")
	}

	mmCreateUser.defaultExpectation.params = &CreateUserRepositoryMockCreateUserParams{ctx, input}
	mmCreateUser.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateUser.expectations {
		if minimock.Equal(e.params, mmCreateUser.defaultExpectation.params) {
			mmCreateUser.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUser.defaultExpectation.params)
		}
	}

	return mmCreateUser
}

// ExpectCtxParam1 sets up expected param ctx for CreateUserRepository.CreateUser
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) ExpectCtxParam1(ctx context.Context) *mCreateUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &CreateUserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &CreateUserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateUser.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateUser
}

// ExpectInputParam2 sets up expected param input for CreateUserRepository.CreateUser
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) ExpectInputParam2(input dto.CreateUserInput) *mCreateUserRepositoryMockCreateUser {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &CreateUserRepositoryMockCreateUserExpectation{}
	}

	if mmCreateUser.defaultExpectation.params != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Expect")
	}

	if mmCreateUser.defaultExpectation.paramPtrs == nil {
		mmCreateUser.defaultExpectation.paramPtrs = &CreateUserRepositoryMockCreateUserParamPtrs{}
	}
	mmCreateUser.defaultExpectation.paramPtrs.input = &input
	mmCreateUser.defaultExpectation.expectationOrigins.originInput = minimock.CallerInfo(1)

	return mmCreateUser
}

// Inspect accepts an inspector function that has same arguments as the CreateUserRepository.CreateUser
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Inspect(f func(ctx context.Context, input dto.CreateUserInput)) *mCreateUserRepositoryMockCreateUser {
	if mmCreateUser.mock.inspectFuncCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("Inspect function is already set for CreateUserRepositoryMock.CreateUser")
	}

	mmCreateUser.mock.inspectFuncCreateUser = f

	return mmCreateUser
}

// Return sets up results that will be returned by CreateUserRepository.CreateUser
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Return(u1 models.User, err error) *CreateUserRepositoryMock {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Set")
	}

	if mmCreateUser.defaultExpectation == nil {
		mmCreateUser.defaultExpectation = &CreateUserRepositoryMockCreateUserExpectation{mock: mmCreateUser.mock}
	}
	mmCreateUser.defaultExpectation.results = &CreateUserRepositoryMockCreateUserResults{u1, err}
	mmCreateUser.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateUser.mock
}

// Set uses given function f to mock the CreateUserRepository.CreateUser method
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Set(f func(ctx context.Context, input dto.CreateUserInput) (u1 models.User, err error)) *CreateUserRepositoryMock {
	if mmCreateUser.defaultExpectation != nil {
		mmCreateUser.mock.t.Fatalf("Default expectation is already set for the CreateUserRepository.CreateUser method")
	}

	if len(mmCreateUser.expectations) > 0 {
		mmCreateUser.mock.t.Fatalf("Some expectations are already set for the CreateUserRepository.CreateUser method")
	}

	mmCreateUser.mock.funcCreateUser = f
	mmCreateUser.mock.funcCreateUserOrigin = minimock.CallerInfo(1)
	return mmCreateUser.mock
}

// When sets expectation for the CreateUserRepository.CreateUser which will trigger the result defined by the following
// Then helper
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) When(ctx context.Context, input dto.CreateUserInput) *CreateUserRepositoryMockCreateUserExpectation {
	if mmCreateUser.mock.funcCreateUser != nil {
		mmCreateUser.mock.t.Fatalf("CreateUserRepositoryMock.CreateUser mock is already set by Set")
	}

	expectation := &CreateUserRepositoryMockCreateUserExpectation{
		mock:               mmCreateUser.mock,
		params:             &CreateUserRepositoryMockCreateUserParams{ctx, input},
		expectationOrigins: CreateUserRepositoryMockCreateUserExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateUser.expectations = append(mmCreateUser.expectations, expectation)
	return expectation
}

// Then sets up CreateUserRepository.CreateUser return parameters for the expectation previously defined by the When method
func (e *CreateUserRepositoryMockCreateUserExpectation) Then(u1 models.User, err error) *CreateUserRepositoryMock {
	e.results = &CreateUserRepositoryMockCreateUserResults{u1, err}
	return e.mock
}

// Times sets number of times CreateUserRepository.CreateUser should be invoked
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Times(n uint64) *mCreateUserRepositoryMockCreateUser {
	if n == 0 {
		mmCreateUser.mock.t.Fatalf("Times of CreateUserRepositoryMock.CreateUser mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateUser.expectedInvocations, n)
	mmCreateUser.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateUser
}

func (mmCreateUser *mCreateUserRepositoryMockCreateUser) invocationsDone() bool {
	if len(mmCreateUser.expectations) == 0 && mmCreateUser.defaultExpectation == nil && mmCreateUser.mock.funcCreateUser == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateUser.mock.afterCreateUserCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateUser.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateUser implements mm_users.CreateUserRepository
func (mmCreateUser *CreateUserRepositoryMock) CreateUser(ctx context.Context, input dto.CreateUserInput) (u1 models.User, err error) {
	mm_atomic.AddUint64(&mmCreateUser.beforeCreateUserCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUser.afterCreateUserCounter, 1)

	mmCreateUser.t.Helper()

	if mmCreateUser.inspectFuncCreateUser != nil {
		mmCreateUser.inspectFuncCreateUser(ctx, input)
	}

	mm_params := CreateUserRepositoryMockCreateUserParams{ctx, input}

	// Record call args
	mmCreateUser.CreateUserMock.mutex.Lock()
	mmCreateUser.CreateUserMock.callArgs = append(mmCreateUser.CreateUserMock.callArgs, &mm_params)
	mmCreateUser.CreateUserMock.mutex.Unlock()

	for _, e := range mmCreateUser.CreateUserMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.u1, e.results.err
		}
	}

	if mmCreateUser.CreateUserMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUser.CreateUserMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateUser.CreateUserMock.defaultExpectation.params
		mm_want_ptrs := mmCreateUser.CreateUserMock.defaultExpectation.paramPtrs

		mm_got := CreateUserRepositoryMockCreateUserParams{ctx, input}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateUser.t.Errorf("CreateUserRepositoryMock.CreateUser got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.input != nil && !minimock.Equal(*mm_want_ptrs.input, mm_got.input) {
				mmCreateUser.t.Errorf("CreateUserRepositoryMock.CreateUser got unexpected parameter input, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.originInput, *mm_want_ptrs.input, mm_got.input, minimock.Diff(*mm_want_ptrs.input, mm_got.input))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateUser.t.Errorf("CreateUserRepositoryMock.CreateUser got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateUser.CreateUserMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateUser.CreateUserMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateUser.t.Fatal("No results are set for the CreateUserRepositoryMock.CreateUser")
		}
		return (*mm_results).u1, (*mm_results).err
	}
	if mmCreateUser.funcCreateUser != nil {
		return mmCreateUser.funcCreateUser(ctx, input)
	}
	mmCreateUser.t.Fatalf("Unexpected call to CreateUserRepositoryMock.CreateUser. %v %v", ctx, input)
	return
}

// CreateUserAfterCounter returns a count of finished CreateUserRepositoryMock.CreateUser invocations
func (mmCreateUser *CreateUserRepositoryMock) CreateUserAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.afterCreateUserCounter)
}

// CreateUserBeforeCounter returns a count of CreateUserRepositoryMock.CreateUser invocations
func (mmCreateUser *CreateUserRepositoryMock) CreateUserBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUser.beforeCreateUserCounter)
}

// Calls returns a list of arguments used in each call to CreateUserRepositoryMock.CreateUser.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUser *mCreateUserRepositoryMockCreateUser) Calls() []*CreateUserRepositoryMockCreateUserParams {
	mmCreateUser.mutex.RLock()

	argCopy := make([]*CreateUserRepositoryMockCreateUserParams, len(mmCreateUser.callArgs))
	copy(argCopy, mmCreateUser.callArgs)

	mmCreateUser.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUserDone returns true if the count of the CreateUser invocations corresponds
// the number of defined expectations
func (m *CreateUserRepositoryMock) MinimockCreateUserDone() bool {
	if m.CreateUserMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateUserMock.invocationsDone()
}

// MinimockCreateUserInspect logs each unmet expectation
func (m *CreateUserRepositoryMock) MinimockCreateUserInspect() {
	for _, e := range m.CreateUserMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CreateUserRepositoryMock.CreateUser at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateUserCounter := mm_atomic.LoadUint64(&m.afterCreateUserCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUserMock.defaultExpectation != nil && afterCreateUserCounter < 1 {
		if m.CreateUserMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to CreateUserRepositoryMock.CreateUser at\n%s", m.CreateUserMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to CreateUserRepositoryMock.CreateUser at\n%s with params: %#v", m.CreateUserMock.defaultExpectation.expectationOrigins.origin, *m.CreateUserMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUser != nil && afterCreateUserCounter < 1 {
		m.t.Errorf("Expected call to CreateUserRepositoryMock.CreateUser at\n%s", m.funcCreateUserOrigin)
	}

	if !m.CreateUserMock.invocationsDone() && afterCreateUserCounter > 0 {
		m.t.Errorf("Expected %d calls to CreateUserRepositoryMock.CreateUser at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateUserMock.expectedInvocations), m.CreateUserMock.expectedInvocationsOrigin, afterCreateUserCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CreateUserRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateUserInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CreateUserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CreateUserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateUserDone()
}
